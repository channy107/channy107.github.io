[
  
  {
    "title": "this",
    "url": "/posts/this/",
    "categories": "Javascript",
    "tags": "writing",
    "date": "2023-12-11 00:00:00 +0900",
    





    
    "snippet": "  이 전 실행 컨텍스트 포스팅에서도  언급했던 개념인 자바스크립트 this에 관해 정리해본다.thisthis 키워드를 알아보기 전 객체에 대해 알고 넘어가자.객체는 상태를 나타내는 프로퍼티와 동작을 나타내는 메서드를 하나의 논리적인 단위로 묶은 자료구조이다. 이때 동작을 나타내는 메서드는 자신이 속한 객체의 프로퍼티를 참조하고 변경할 수 있어야 한다...",
    "content": "  이 전 실행 컨텍스트 포스팅에서도  언급했던 개념인 자바스크립트 this에 관해 정리해본다.thisthis 키워드를 알아보기 전 객체에 대해 알고 넘어가자.객체는 상태를 나타내는 프로퍼티와 동작을 나타내는 메서드를 하나의 논리적인 단위로 묶은 자료구조이다. 이때 동작을 나타내는 메서드는 자신이 속한 객체의 프로퍼티를 참조하고 변경할 수 있어야 한다. 따라서 메서드가 자신이 속한 객체의 프로퍼티를 참조하려면 먼저 자신이 속한 객체를 가리키는 식별자를 참조할 수 있어야 한다.const circle = {    radius: 5    getDiameter() {        return 2 * circle.radius;    }};console.log(circle.getDiameter());위 예시에서 객체 리터럴은 circle 변수에 할당되기 직전에 평가되기 때문에 getDiameter 메서드가 호출되는 시점에는 객체 리터럴의 평가가 완료되어 객체가 생성되었고 circle 식별자에 생성된 객체가 할당된 이후이다. 따라서 메서드 내부에서 circle 식별자를 참조할 수 있다.하지만 자기 자신이 속한 객체를 재귀적으로 참조하는 방식은 객체의 이름이 하드코딩 되어있어 코드를 재사용하기 어렵다. 만약 객체의 이름을 변경하거나 다른 객체에 적용하려면 참조하고 있는 모든 코드를 수정해야한다. 따라서 이러한 방식은 바람직하지 않다.function Circle(radius) { ????.radius = radius;}Circle.prototype.getDiameter = function () { return 2 * ????.radius;};const circle = new Circle(5);위 예시는 생성자 함수 방식으로 인스턴스를 생성하는 경우이다. 생성자 함수 내부에서는 프로퍼티 또는 메서드를 추가하기 위해 자신이 생성할 인스턴스를 참조할 수 있어야 하는데, 생성자 함수에 의한 객체 생성 방식은 먼저 생성자 함수를 정의한 이후 new 연산자와 함께 생성자 함수를 호출하는 단계가 추가로 필요하다. 따라서 생성자 함수를 정의하는 시점에는 아직 인스턴스를 생성하기 이전이므로 생성자 함수가 생성할 인스턴스를 가리키는 식별자를 알 수 없다.따라서 자신이 속한 객체 또는 자신이 생성할 인스턴스를 가리키는 특수한 식별자가 필요한데 이를 위해 this 라는 특수한 식별자를 제공한다.하지만 this가 무조건 자신이 속한 객체나 자신이 생성할 인스턴스를 가리키지는 않는다. 자바스크립트에서 this는 실행 컨텍스트에 따라 동적으로 바인딩되어 코드의 위치나 함수의 호출 방식에 따라 값이 달라진다.전역 컨텍스트에서 this전역 컨텍스트에서 this는 전역 객체를 참조. 브라우저 환경에선 window 객체 node 환경에서는 global 객체를 가리킨다.console.log(this) // window or global함수 호출에서 this일반적인 함수 호출에서 this는 전역객체 또는 undefined(strict mode)를 참조.function foo() {    console.log(this);};foo(); // window or undefined메서드 호출에서 this객체의 매서드 내에서 this는 해당 메서드를 호출한 객체를 참조.const myObject = {    property: 'value',    myMethod() {        console.log(this.property);    }}myObject.myMethod(); // 메서드 호출에서 this는 해당 객체(myObject)를 가리키므로 'value' 가 출력생성자 함수에서 this생성자 함수 내에서 this는 새로 생성된 객체를 참조.function MyClass(value) {    this.property = value;}const myInstance = new MyClass(\"instance\");console.log(myInstance.property); // this는 생성된 객체를 참조하기 떄문에 'instance' 출력이벤트 핸들러에서 this이벤트 핸들러에서 this는 이벤트를 발생시킨 요소를 참조&lt;!-- button 에서 이벤트를 발생시켰기 때문에 button 을 참조 --&gt;&lt;button onclick=\"console.log(this)\"&gt;Click me&lt;/button&gt;화살표 함수에서 this화살표 함수는 자체적인 this는 외부 스코프의 this 값을 참조var value = 1;const obj = {    value: 100,    foo() {    // 화살표 함수 내부의 this는 상위 스코프의 this를 가리킨다.    setTimeout(() =&gt; console.log(this.value), 100); // 100    }};obj.foo();call/apply/bindapply/call/bind 메서드는 Function.prototype의 메서드로 이 메서드들은 모든 함수가 상속받아 사용할 수 있다. 이 함수들을 통해 this 값을 명시적으로 지정할 수 있다.apply/call 메서드는 this로 사용할 객체와 인수들을 전달받아 함수를 호출한다.function getThisBinding() { console.log(arguments); return this;}// this로 사용할 객체const thisArg = { a: 1 };// apply 메서드는 호출할 함수의 인수를 배열로 묶어 전달console.log(getThisBinding.apply(thisArg, [1, 2, 3]));// call 메서드는 호출할 함수의 인수를 쉼표로 구분한 리스트 형식으로 전달console.log(getThisBinding.call(thisArg, 1, 2, 3));// 출력// Arguments(3) [1, 2, 3, callee: ƒ, Symbol(Symbol.iterator): ƒ]// {a: 1}위 예시처럼 apply와 call 메서드는 호출할 함수에 인수를 전달하는 방식만 다를 뿐 this로 사용할 객체를 전달하면서 함수를 호출하는 것은 동일.call 과 apply 의 경우 특정 객체의 메서드를 다른 객체에서 재사용하는 데 유용하게 사용할 수 있다.const person1 = {     name: 'Alice',     greet: function() {         console.log(`Hello, ${this.name}!`);     }; };const person2 = { name: 'Bob' };person1.greet.call(person2);// 출력: Hello, Bob!bind 메서드는 apply와 call 메서드와 달리 함수를 호출하지 않고 첫 번째 인수로 전달한 값으로 this 바인딩이 교체된 함수를 새롭게 생성해 반환function getThisBinding() { return this;}// this로 사용할 객체const thisArg = { a: 1 };console.log(getThisBinding.bind(thisArg)); // getThisBindingconsole.log(getThisBinding.bind(thisArg)()); // {a: 1}bind 메서드의 경우 메서드의 this와 메서드 내부의 중첩 함수 또는 콜백 함수의 this가 불일치 하는 문제를 해결하는 데 유용하게 사용된다.// bind 사용 Xconst person = {    name: 'Lee',        foo(callback) {        setTimeout(callback, 100);    }};person.foo(function () {    console.log(`Hi! my name is ${this.name}.`); // Hi! my name is .// bind 사용const person = {    name: 'Lee',    foo(callback) {        setTimeout(callback.bind(this), 100);    }};person.foo(function () {    console.log(`Hi! my name is ${this.name}.`); // Hi! my name is Lee.});첫 번째 bind를 사용하지 않은 예시에서 foo 의 콜백함수가 일반 함수로서 호출되기 때문에 this는 전역 객체를 가리켜 this.name은 window.name과 같아 원하는 대로 동작하지 않는다. 이때 foo 메서드에서 콜백함수에 bind 함수를 통해 this를 명시적으로 지정하여 원하는 객체를 참조하도록 할 수 있다.마치며저번 실행 컨텍스트 을 작성하고 정리하고자 했던 this 개념에 대해 정리를 해보았다. 최대한 자주자주 포스팅을 하고 싶은데 아무래도 이직 준비를 같이 하다보니 면접이 잡히면 포스팅을 하기가 어려워 오랜만에 작성을 하게 됐다. this 같은 경우는 알고 있는 개념이긴 했지만 역시 포스팅을 하고나니 좀 더 정리가 되는 느낌이다. 이번주도 과제와 면접들이 잡혀 있어 언제 다시 포스팅할 지 모르지만 일정이 마무리되면 다시 임하하 프로젝트도 얼른 다시 시작해서 포스팅 하고싶다!!!"
  },
  
  {
    "title": "SOLID 원칙",
    "url": "/posts/solid/",
    "categories": "개발방법론",
    "tags": "writing",
    "date": "2023-11-22 00:00:00 +0900",
    





    
    "snippet": "  객체지향 설계에서 사용되는 5가지 원칙인 SOLID 원칙에 대해 정리해본다.SOLID 원칙SOLID 는 위키에 따르면 로버트 마틴이 2000년대 초반 명명한 객체 지향 프로그래밍 및 설계의 5가지 기본 원칙을 소개한 것으로 개발자가 시간이 지나도 유지 보수와 확장이 쉬운 시스템을 만들고자 할 때 이 원칙들을 적용할 수 있다고 소개한다.그럼 바로 S...",
    "content": "  객체지향 설계에서 사용되는 5가지 원칙인 SOLID 원칙에 대해 정리해본다.SOLID 원칙SOLID 는 위키에 따르면 로버트 마틴이 2000년대 초반 명명한 객체 지향 프로그래밍 및 설계의 5가지 기본 원칙을 소개한 것으로 개발자가 시간이 지나도 유지 보수와 확장이 쉬운 시스템을 만들고자 할 때 이 원칙들을 적용할 수 있다고 소개한다.그럼 바로 SOLID 원칙에 대해 살펴보자.SRP(단일책임의 원칙: Single Responsibility Principle)  한 클래스는 하나의 책임만 가져야 한다.로버트 마틴은 책임을 변경하려는 이유로 정의하고 어떤 클래스나 모듈을 변경하려는 단 하나의 이유만을 가져야 한다고 결론을 짓는다.예시 (feat. chat gpt)// Bad Exampleclass User {  private name: string;  private email: string;  constructor(name: string, email: string) {    this.name = name;    this.email = email;  }  // 사용자 정보를 반환하는 메서드  getInfo() {      return `Name: ${this.name}, Email: ${this.email}`;  }  // 데이터베이스에 사용자 정보를 저장하는 메서드  saveToDatabase() {    console.log('Saving to database:', this.getInfo());  }}// Good Exampleclass User {  private name: string;  private email: string;  constructor(name: string, email: string) {    this.name = name;    this.email = email;  }  getInfo() {    return `Name: ${this.name}, Email: ${this.email}`;  }}// 사용자 정보를 저장하는 책임을 UserRepository Class 로 분리해주었다.class UserRepository {  saveToDatabase(user: User) {    console.log('Saving to database:', user.getInfo());  }}Bad Example 에선 User 클래스에 사용자 정보 반환과 데이터 베이스에 저장하는 함수가 같은 클래스에 포함되어 있다. 이를 UserRepository Class를 만들어 각 클래스가 하나의 책임을 가지도록 하여 SRP를 지킬 수 있는 코드로 수정할 수 있다.OCP(개방-폐쇄 원칙: Open/Closed principle)  소프트웨어 요소는 확장에는 열려 있으나 변경에는 닫혀 있어야 한다.개발 중 하나를 수정할 때 그 모듈을 이용하는 다른 모듈을 줄줄이 고쳐야 한다면 이와 같은 프로그램은 수정하기가 어렵다. 개방-폐쇄원칙이 잘 적용된다면, 기능을 추가하거나 변경해야 할 때 이미 동작하고 있던 원래 코드를 변경하지 않아도 기존 코드에 새로운 코드를 추가함으로써 기능의 추가나 변경이 가능하다.예시 (feat. chat gpt)// Bad Exampleclass Rectangle {  private width: number;  private height: number;  constructor(width: number, height: number) {    this.width = width;    this.height = height;  }  getWidth(): number {    return this.width;  }  getHeight(): number {    return this.height;  }}// 정사각형의 경우 가로, 세로 길이가 같아야 함class Square extends Rectangle {  constructor(side: number) {    super(side, side);  }}// Good Exampleinterface Shape {  area(): number;}class Rectangle implements Shape {  private width: number;  private height: number;  constructor(width: number, height: number) {    this.width = width;    this.height = height;  }  area(): number {    return this.width * this.height;  }}class Square implements Shape {  private side: number;  constructor(side: number) {    this.side = side;  }  area(): number {    return this.side * this.side;  }}OCP를 위반한 예시에서는 Square 클래스가 Rectangle 클래스를 상속하면서 setWidth와 setHeight 메서드를 오버라이딩하여 정사각형의 특성에 맞게 변경해야 하는데, Square(정사각형)의 경우 두 변이 같다는 특성이 있기 때문에 Rectangle을 그에 맞게 변경해야 합니다. 이는 확장에 열려있지만 수정에는 닫혀 있지 않다고 볼 수 있습니다.반면 OCP를 준수한 예시에서는 Shape 인터페이스를 도입하여 각 도형이 area 메서드를 구현하도록 하여, 새로운 도형이 추가되더라도 해당 도형에 대한 확장이 가능하고, Rectangle 및 Square 클래스는 수정되지 않습니다.LSP(리스코프 치환 원칙: Liskov substitution principle)  프로그램에서 자료형 S가 자료형 T의 서브 타입이라면 필요한 프로그램의 속성의 변경 없이 자료형 T의 객체를 자료형 S의 객체로 교체할 수 있어야 한다. 즉 상위 타입의 객체를 하위 타입의 객체로 교체해도 프로그램의 의미나 동작이 변하지 않아야 한다는 원칙.이는 바로 예시를 통해 살펴 보자예시 (feat. chat gpt)// Bad Exampleclass Bird {  fly() {    console.log('Flying');  }}class Penguin extends Bird {  // 펭귄은 날지 못함  fly() {    throw new Error('Penguins cannot fly');  }}// Good Exampleinterface Flyable {  fly(): void;}class Bird implements Flyable {  fly() {    console.log('Flying');  }}class Penguin implements Flyable {  // 펭귄은 날지 못하지만 LSP를 준수하기 위해 메서드를 구현  fly() {    console.log('Sorry, I cannot fly');  }}LSP를 준수한 예시에서는 Bird 클래스와 Penguin 클래스가 Flyable 인터페이스를 구현한다.이로써 Penguin은 fly 메서드를 구현하면서 예외를 던지지 않고, 상위 타입인 Bird의 메서드를 대체할 수 있습니다. 프로그램의 의미나 동작이 변하지 않으면서도 하위 타입인 Penguin이 상위 타입인 Bird로 교체될 수 있게 된다.ISP(인터페이스 분리 원칙: Interface Segregation Principle)  특정 클라이언트를 위한 인터페이스 여러 개가 범용 인터페이스 하나보다 낫다.인터페이스 분리 원칙은 큰 덩어리의 인터페이스들을 구체적이고 작은 단위들로 분리시킴으로써 클라이언트들이 꼭 필요한 메서드들만 이용할 수 있게 하는 원칙이다.예시 (feat. chat gpt)// Bad Exampleinterface Worker {  work(): void;  eat(): void;}class SuperWorker implements Worker {  // SuperWorker는 일하는 동안에도 먹을 수 있음  work() {    console.log('SuperWorker is working');  }  eat() {    console.log('SuperWorker is eating');  }}// Good Exampleinterface Workable {  work(): void;}interface Eatable {  eat(): void;}class Worker implements Workable {  work() {    console.log('Worker is working');  }}class SuperWorker implements Workable, Eatable {  work() {    console.log('SuperWorker is working');  }  eat() {    console.log('SuperWorker is eating');  }}ISP를 준수한 예시에서 Workable 인터페이스와 Eatable 인터페이스를 분리함에 따라 일하면서 먹지 않는 Worker 클래스와 먹으면서 일할 수 있는 SuperWorker 클래스로 좀 더 명확하게 나눌 수 있게 된다. 이로써 클라이언트는 사용하지 않을 수 있는 eat 메서드에 의존할 필요가 없게 되며, 필요한 기능에만 의존할 수 있게 된다.DIP(의존 역전 원칙: Dependency Inversion Principle)  개발자는 추상화에 의존해야지, 구체화에 의존하면 안된다.이는 바로 예시를 통해 살펴 보자예시 (feat. chat gpt)// Bad Exampleclass LightBulb {  turnOn() {    console.log('LightBulb is ON');  }  turnOff() {    console.log('LightBulb is OFF');  }}class Switch {  private lightBulb: LightBulb;  constructor(lightBulb: LightBulb) {    this.lightBulb = lightBulb;  }  operate() {    if (this.lightBulb.isOn()) {      this.lightBulb.turnOff();    } else {      this.lightBulb.turnOn();    }  }}// Good Exampleinterface Switchable {  turnOn(): void;  turnOff(): void;}class LightBulb implements Switchable {  turnOn() {    console.log('LightBulb is ON');  }  turnOff() {    console.log('LightBulb is OFF');  }}class Switch {  private switchable: Switchable;  constructor(switchable: Switchable) {    this.switchable = switchable;  }  operate() {    if (this.switchable.isOn()) {      this.switchable.turnOff();    } else {      this.switchable.turnOn();    }  }}Bad Example 에서 Switch 클래스는 LightBulb 클래스에 직접 의존하고 있다. 만약 다른 종류의 스위치 가능한(Switchable) 장치가 추가된다면, Switch 클래스는 수정되어야 할 것이다.Good Example 에서 Switch 클래스는 Switchable 인터페이스에 의존하고 있다. 이 인터페이스는 turnOn과 turnOff 메서드를 선언하고 있어서 어떤 장치라도 이 인터페이스를 구현하면 된다. 이로써 Switch 클래스는 구체적인 구현에 의존하지 않고, 추상화된 인터페이스에만 의존하게 되고 따라서 새로운 Switchable 장치가 추가되어도 Switch 클래스를 수정할 필요가 없다.마치며면접 준비를 하면서 봤던 키워드 중 하나인 SOLID 원칙에 대해 정리해보았다. 지금까지 프론트엔드 개발을 하면서 React의 함수 컴포넌트를 사용했기 때문에 객체 지향 프로그래밍에 대해 크게 생각을 안해봤던 거 같은데 이번 기회에 정리함으로써 개념 정도는 파악이 된 것 같다. 객체 지향 프로그래밍 경험이 많지 않아 chat gpt 의 도움을 받아 예시를 만들었지만, 이 원칙을 잘 기억해두고 있다가 개인 프로젝트든 업무를 하게 될 떄든 써먹게 된다면 좀 더 높은 수준의 예시로 수정을 하고 싶다.그리고 SOLID 원칙이 객체 지향 프로그램에서 나온 원칙이지만 이를 프론트엔드 개발자의 관점으로 바라보는 글들도 꽤 많이 보였다. 예를 들어 SRP 같은 경우 클린 코드에서 본 거 같던 “함수는 한 가지 작업을 수행해야 한다” 와도 크게 다르지 않을 거 같고 React 에서 컴포넌트를 설계할 때도 적용할 수 있을 거 같았다.그래서 SOLID 원칙을 프론트엔드 관점에서 보는 것을 따로 포스팅 주제로 삼아도 좋을 거 같다는 생각이 들었다.참고  위키: SOLID (객체 지향 설계)"
  },
  
  {
    "title": "임하하 - Home(기존페이지 분석)",
    "url": "/posts/lim-haha-home/",
    "categories": "Project, 임하하",
    "tags": "writing",
    "date": "2023-11-22 00:00:00 +0900",
    





    
    "snippet": "  임하하 Home 화면 작업 전 실제 침하하 Home 화면의 요소들을 정리해본다.침하하 Home 전체 화면아래 사진은 침하하 Home 화면이다. 화면이 상/하로 길어 크게 회원가입/로그인 부터 광고영역까지 상단 부분, 아래 게시글 목록 하단 부분으로 정리해본다.상단부분침하하 Home 상단부분에서는 크게 Header 영역, shortcuts 영역, 최...",
    "content": "  임하하 Home 화면 작업 전 실제 침하하 Home 화면의 요소들을 정리해본다.침하하 Home 전체 화면아래 사진은 침하하 Home 화면이다. 화면이 상/하로 길어 크게 회원가입/로그인 부터 광고영역까지 상단 부분, 아래 게시글 목록 하단 부분으로 정리해본다.상단부분침하하 Home 상단부분에서는 크게 Header 영역, shortcuts 영역, 최신 업로드 영역으로 나누고 있다Header 영역Header 영역은 최상단에 회원가입과 로그인 중간에 로고 그 아래에는 게시판으로 이동할 수 있는 탭들이 있다.탭의 경우 hover 할 경우 해당 게시판에 포함되어 있는 상세 게시판들이 보인다. 탭을 클릭을 할 경우 해당 게시판의 전체 게시물 목록 페이지로 가고 상세 게시판을 클릭할 경우 상세 게시판 목록 페이지로 간다.Shortcuts 영역Shortcuts 영역은 사용자가 최근 방문 했던 게시판 목록들을 최대 10개까지 보여준다.최근 업로드 영역최근 업로드 영역에선 본 채널인 침투부 채널과 원본 영상 채널인 원본 박물관 채널의 최근 업로드 영상들을 불러오고 재생할 수 있는 영역이다.하단 부분하단 부분은 크게 타이틀, 공지, 게시글 목록, 페이지네이션, 검색 영역으로 이루어져 있다.정리위 정리한 내용과 실제 침하하 사이트 마크업을 참고했을 때 아래 처럼 컴포넌트를 구성해보았다. 실제 개발하면서 바뀔 수 도 있지만 우선은 아래 구성으로 개발을 시작해보려고 한다! 그래서 다음 포스팅은 실제 개발에 들어가면서 정리한 내용이 될 거 같다!!&lt;Header&gt;    &lt;TopBar /&gt;    &lt;HeaderTitle /&gt;    &lt;Tabs /&gt;    &lt;RecentVisited /&gt;&lt;/Header&gt;&lt;Main&gt;    &lt;RecentUploaded /&gt;    &lt;Contents&gt;        &lt;Notice /&gt;        &lt;Posts /&gt;    &lt;/Contents&gt;    &lt;Pagination /&gt;    &lt;Search /&gt;&lt;/Main&gt;"
  },
  
  {
    "title": "프로젝트 소개",
    "url": "/posts/toy-project/",
    "categories": "Project, 임하하",
    "tags": "writing",
    "date": "2023-11-17 00:00:00 +0900",
    





    
    "snippet": "  그 동안 공부했던 기술들을 바탕으로 침하하 사이트를 클론 코딩하는 프로젝트를 진행하기 위해 관련 내용을 정리한다.사용할 스킬Core  타입스크립트 / React(Next.js)최근 Next.js 14버전이 릴리즈 되어 14버전의 app router 기반으로 프로젝트를 세팅한다.상태 관리  Recoil, React Query(서버 상태)프로젝트의 전...",
    "content": "  그 동안 공부했던 기술들을 바탕으로 침하하 사이트를 클론 코딩하는 프로젝트를 진행하기 위해 관련 내용을 정리한다.사용할 스킬Core  타입스크립트 / React(Next.js)최근 Next.js 14버전이 릴리즈 되어 14버전의 app router 기반으로 프로젝트를 세팅한다.상태 관리  Recoil, React Query(서버 상태)프로젝트의 전역상태는 Recoil, 서버상태는 React Query 를 사용하여 관리한다.Mocking  MSW당장 백엔드 환경이 없으므로 MSW을 사용하여 mocking 환경을 구성한다.구현 범위침하하 사이트 아래와 같은 화면 및 기능을 제공한다.  홈  회원가입  로그인  게시판  게시글  글쓰기  글수정  마이페이지  알림  신고 건의이번 토이 프로젝트에서는 공부했던 기술들을 바탕으로 먼저 간단한 CRUD 기능에 해당되는  홈, 게시판, 게시글, 글쓰기, 글수정, 글삭제 화면 및 기능을 우선 진행한다.위 화면 및 기능을 우선 구현 후 회원 가입과 로그인 기능을 구현한다.알림, 마이 페이지, 신고 건의 화면은 화면만 다를뿐 CRUD 기능에 벗어나지 않아 따로 진행하진 않는다."
  },
  
  {
    "title": "실행 컨텍스트",
    "url": "/posts/execution-context/",
    "categories": "Javascript",
    "tags": "writing",
    "date": "2023-11-07 00:00:00 +0900",
    





    
    "snippet": "  자바스크립트 실행 컨텍스트에 대해 정리한다.실행 컨텍스트소스코드의 평가와 실행실행 컨텍스트를 알아보기에 앞서 모든 소스코드는 실행에 앞서 평가하는 과정을 거치면서 실행을 하기 위한 준비를 한다.소스코드 평가 과정에서는 실행 컨텍스트를 생성하고 변수, 함수 등의 선언부부터 먼저 실행하여 변수나 함수 식별자를 키로 실행 컨텍스트가 관리하는 스코프(렉시...",
    "content": "  자바스크립트 실행 컨텍스트에 대해 정리한다.실행 컨텍스트소스코드의 평가와 실행실행 컨텍스트를 알아보기에 앞서 모든 소스코드는 실행에 앞서 평가하는 과정을 거치면서 실행을 하기 위한 준비를 한다.소스코드 평가 과정에서는 실행 컨텍스트를 생성하고 변수, 함수 등의 선언부부터 먼저 실행하여 변수나 함수 식별자를 키로 실행 컨텍스트가 관리하는 스코프(렉시컬 환경의 환경 레코드)에 등록한다.소스코드 실행 과정은 소스코드 평가 과정이 끝나면 순차적으로 실행되기 시작한다. 이때 실행에 필요한 변수나 함수의 참조를 실행 컨텍스트가 관리하는 스코프에서 검색해서 알아낸다. 그리고 변수 값의 변경 등 소스코드의 실행 결과는 다시 실행컨텍스트가 관리하는 스코프에 등록된다.정리해보면 실행 컨텍스트는 소스코드 평가 과정에서 생성되며 실행 과정에서 필요한 식별자를 등록하고 관리하는 스코프와 코드 실행 순서 관리를 구현한 내부적인 메커니즘으로 구성되어 있으며 모든 코드는 실행 컨텍스트를 통해 실행되고 관리된다.렉시컬 환경렉시컬 환경(Lexical Environment)은 식별자와 식별자에 바인딩된 값, 그리고 상위 스코프에 대한 참조를 기록하는 자료구조로 실행 컨텍스트를 구성하는 컴포넌트이다.렉시컬 환경은 환경 레코드 와 외부 렉시컬 환경에 대한 참조 로 구성된다.  환경 레코드스코프에 포함된 식별자를 등록하고 등록된 식별자에 바인딩된 값을 관리하는 저장소다. 환경 레코드는 소스코드의 타입에 따라 관리하는 내용에 차이가 있다.  외부 렉시컬 환경에 대한 참조외부 렉시컬 환경에 대한 참조는 상위 스코프를 가리킨다. 이때 상위 스코프란 외부 렉시컬 환경. 즉 해당 실행 컨텍스트를 생성한 소스코드를 포함하는 상위 코드의 렉시컬 환경을 말한다. 외부 렉시컬 환경에 대한 참조를 통해 단방향 링크드 리스트인 스코프 체인을 구현한다.실행 컨텍스트 생성과 식별자 검색 과정아래 코드를 통해 실행 컨텍스트 생성과 식별자 검색 과정을 알아본다.var x = 1;const y = 2;function outerFunc(a) {    var x = 3;    const y = 4;    function innerFunc(b) {        const z = 5;        console.log(a + b + x + y + z);    }    innerFunc(10);}outerFunc(20); // 42전역 코드 평가소스가 로드되면 자바스크립트 엔진은 전역 코드를 아래와 같이 평가하여 전역 실행 컨텍스트와 렉시컬 환경을 생성한다.전역 실행 컨텍스트 생성 및 전역 렉시컬 환경 생성  비어있는 전역 실행 컨텍스트를 생성하여 실행 컨텍스트에 푸시  전역 렉시컬 환경을 생성하고 전역 실행 컨텍스트에 바인딩한다.전역 환경 레코드 생성전역 렉시컬 환경을 구성하는 컴포넌트인 전역 환경 레코드는 전역 변수를 관리하는 전역 스코프, 전역 객체의 빌트인 전역 프로퍼티와 빌트인 전역 함수, 표준 빌트인 객체를 제공한다.전역 환경 레코드는 객체 환경 레코드와 선언적 환경 레코드로 구성되어 있는데,객체 환경 레코드는 기존의 전역 객체가 관리하던 var 키워드로 선억한 전역 변수와 함수 선언문으로 정의한 전역 함수, 빌트인 전역 프로퍼티와 빌트인 전역 함수, 표준 빌트인 객체를 관리선언적 환경 레코드는 let, const 키워드로 선언한 전역 변수를 관리한다.객체 환경 레코드 생성객체 환경 레코드는 BindingObject라고 부르는 객체와 연결되고, 전역 코드 평가 과정에서 var 키워드로 선언한 전역 변수와 함수 선언문으로 정의된 전역 함수는 객체 환경 레코드에 연결된 BindingObject를 통해 전역 객체의 프로퍼티와 메서드가 된다.여기에서 변수 x는 var 키워드로 선언했기 때문에 선언 단계와 초기화 단계가 동시에 진행되므로, 전역 코드 평가 시점에 객체 환경 레코드에 바인딩된 BindingObject를 통해 전역 객체에 변수 식별자를 키로 등록한 다음 암묵적으로 undefined를 바인딩한다.따라서 var 키워드로 선언한 변수는 코드 실행 단계에서 변수 선언문 이전에도 참조할 수 있게 되고 이러한 과정이 변수 호이스팅이 발생하는 원인이다.함수 선언문으로 정의한 함수가 평가되면 함수 이름과 동일한 이름의 식별자를 객체 환경 레코드에 바인딩된 BindingObject를 통해 전역 객체에 키로 등록하고 생성된 함수 객체를 즉시 할당한다. 따라서 함수 선언문으로 정의한 함수는 함수 선언문 이전에 호출할 수 있고, 이것이 변수 호이스팅과 함수 호이스팅의 차이이다.선언적 환경 레코드 생성let, const 키워드로 선언한 전역 변수는 선언적 환경 레코드에 등록되고 관리된다.let, const 키워드로 선언한 변수는 선언 단계와 초기화 단계가 분리되어 진행되기 때문에 런타임에서 실행 흐름이 변수 선언문에 도달하기 전까지 일시적 사각지대(Temporal Dead Zone)에 빠지게 된다.this 바인딩일반적으로 전역 코드에서 this는 전역 객체를 가리키므로 전역 환경 레코드의 [[GlobalThisValue]] 내부 슬롯에는 전역 객체가 바인딩되고, 전역 코드에서 this를 참조하면 전역 환경 레코드의 [[GlobalThisValue]] 내부 슬록에 바인딩되어 있는 객체가 반환된다.외부 렉시컬 환경에 대한 참조외부 렉시컬 환경에 대한 참조는 현재 평가 중인 소스코드를 포함하는 외부 소스코드의 렉시컬 환경, 즉 상위 스코프를 가리킨다.현재 평가 중인 소스코드는 전역 코드이고, 이를 포함하는 소스코드는 없으므로 전역 렉시컬 환경의 외부 렉시컬 환경에 대한 참조에 null이 할당된다.전역 코드 실행평가를 마친 후 전역코드가 순차적으로 실행되기 시작하면서 변수 할당문이 실행되어 전역 변수 x, y에 값이 할당되고, outerFunc 함수가 호출된다.변수를 할당하거나 함수를 호출하기 위해서는 변수 또는 함수 이름이 선언되어 있는 식별자인지 확인해야 한다. 선언되지 않는 식별자는 참조할 수 없기 때문에 할당이나 호출 역시 할 수 없다. 또한 식별자는 다른 스코프에 여러 개 존재할 수도 있기 때문에 어느 스코프의 식별자를 참조하면 되는 지 결정할 필요가 있는데 이를 식별자 결정이라고 한다.식별자 결정을 위해 식별자를 검색할 때는 실행 중인 실행 컨텍스트의 렉시컬 환경의 환경레코드에서 식별자를 검색하기 시작하고 만약 실행 중인 실행 컨텍스트의 렉시컬 환경에서 식별자를 검색할 수 없으면 외부 렉시컬 환경에 대한 참조가 가리키는 렉시컬 환경, 즉 상위 스코프로 이동하여 식별자를 검색하는데 이것이 바로 스코프 체인의 동작 원리이다.outerFunc 함수 코드 평가아래 코드에서 현재까지 전역 코드 평가를 통해 전역 실행 컨텍스트가 생성되었고 전역 코드를 실행하고 있다. 그리고 outerFunc 함수를 호출하기 직전인 상황이다.var x = 1;const y = 2;function outerFunc(a) {    var x = 3;    const y = 4;    function innerFunc(b) {        const z = 5;        console.log(a + b + x + y + z);    }    innerFunc(10);}outerFunc(20); // &lt;- 호출 직전outerFunc 함수가 호출되면 전역 코드의 실행을 중단하고 outerFunc 함수 내부로 코드의 제어권이 이동되고, 함수 코드를 평가하기 시작한다.outerFunc 코드 평가outerFunc 함수 실행 컨텍스트와 렉시컬 환경은 아래와 같다.outerFunc 실행 컨텍스트 생성 및 렉시컬 환경 생성outerFunc 함수 실행 컨텍스트를 생성 후 실행 컨텍스트 스택에 푸시한다. 그 후에 렉시컬 환경을 생성하고 outerFunc 함수 실행 컨텍스트에 바인딩한다.outerFunc 함수 환경 레코드 생성함수 환경 레코드는 매개변수, arguments 객체, 함수 내부에 선언한 지역 변수와 중첩 함수를 등록하고 관리한다.outerFunc this 바인딩함수 환경 레코드의 [[ThisValue]] 내부 슬롯에 this가 바인딩된다. this는 함수 호출 방식에 따라 결정되는데, outerFunc 함수는 일반 함수로 호출되었으므로 this는 전역 객체를 가리킨다.outerFunc 외부 렉시컬 환경에 대한 참조외부 렉시컬 환경에 대한 참조에 outerFunc 함수 정의가 평가된 시점에 실행 중인 실행 컨텍스트의 렉시컬 환경의 참조가 할당된다.현재 시점에서 실행 중인 실행 컨텍스트는 전역 실행 컨텍스트이므로 외부 렉시컬 환경에 대한 참조에는 전역 렉시컬 환경의 참조가 할당된다.outerFunc 함수 코드 실행함수 평가를 마친 후 outerFunc 함수의 소스코드가 순차적으로 실행되기 시작한다.이 때, 매개변수에 인수가 할당되고, 변수 할당문이 실행되어 지역 변수 x, y에 값이 할당된다. 그리고 함수 innerFunc가 호출된다.innerFunc의 코드 평가와 실행은 outerFunc 와 동일한 과정으로 이루어지고 그 결과는 아래와 같다.innerFunc 함수 코드 평가innerFunc 함수 코드 실행innerFunc 함수 코드 실행 종료innerFunc 의 소스코드를 모두 실행하여 종료되면 실행 컨텍스트 스택에서 innerFunc 함수 실행 컨텍스트가 팝되어 제거되고 outerFunc 실행 컨텍스트가 실행 중인 실행 컨텍스트가 된다.실행 컨텍스트 스택에서 innerFunc 함수 실행 컨텍스트가 제거되었다고 해서 innerFunc 함수 렉시컬 환경까지 바로 소멸되는 것은 아니다. 렉시컬 환경은 실행 컨텍스트에 의해 참조되기는 하지만 독립적인 객체기 때문에 누군가에 의해 참조되지 않을 때 가비지 컬렉터에 의해 메모리 공간의 확보가 해제되어 소멸된다. 따라서 innerFunc 함수 실행 컨텍스트가 소멸되었다고 하더라도 innerFunc 함수 렉시컬 환경을 누군가 참조하고 있다면 innerFunc 함수 렉시컬 환경은 소멸되지 않는다.outer 함수 코드 &amp; 전역 코드 실행 종료이 후 outerFunc 함수 코드 실행이 종료되고 같은 과정으로 전역 코드 실행도 종료가 된다.정리지금까지 코드 예시를 통해 소스 코드가 평가되고 실행되는 과정에 어떻게 실행 컨텍스트가 생성되고 사용되는 지 살펴보았다. 이를 통해 실행 컨텍스트가 무엇인 지 요약해보면 아래와 같이 할수 있을 것 같다  실행 컨텍스트는 자바스크립트가 코드를 실행하기 위해 평가하는 과정에서 생성되며 실행 컨텍스트 스텍을 통해 코드 실행 순서를 관리하고 환경 레코드와 외부 렉시컬 환경에 대한 참조를 통해 실행에 필요한 식별자를 등록하고 관리하는 역할을 한다.마치며..이번 포스팅에는 면접에서 많이 물어본다는 실행 컨텍스트를 정리해보았다. 정리한 내용의 대부분은 모던 자바스크립트 deep dive 라는 책을 참고했다. 해당 내용을 쭉 보고 내가 이해한 나만의 언어로 적어 볼까 했지만 그러는 과정에서 잘못된 용어로 오히려 왜곡될 수 있을 거 같아 스스로 작성하고 그림을 만들어보면서 이해하는 데에 최대한 집중을 했다.실행 컨텍스트를 정리하기 전까지는 실행 컨텍스트가 한 마디로 정리가 안돼서 대답을 할 때 조금 갈피를 못잡았던 거 같은데 이제는 조금 정리가 된 거 같다. 정리하면서 호이스팅, 스코프체인, 렉시컬 환경, this, var와 let, const, 함수 선언문과 표현식의 차이 등등  하나하나가 면접 키워드들인 것들에 대한 내용도 함께 확인할 수 있었던 시간이 된 거 같은데, 이번 내용에는 포함이 안된 함수 호출 방식에 따른 this 의 결정, 렉시컬 환경과 클로저 함수 등의 내용은 추후 포스팅에서 따로 정리를 해도 좋을 거 같다는 생각이 들었다."
  },
  
  {
    "title": "호이스팅",
    "url": "/posts/hoisting/",
    "categories": "Javascript",
    "tags": "writing",
    "date": "2023-11-02 00:00:00 +0900",
    





    
    "snippet": "  자바스크립트 호이스팅에 대해 정리한다.호이스팅은 무엇인가?  MDN 문서에 따르면, 호이스팅은 인터프리터가 코드를 실행하기 전에 함수, 변수, 클래스 또는 임포트(import)의 선언문을 해당 범위의 맨 위로 이동시키는 과정을 말한다.아래 코드를 예시로 보면console.log(x); // undefinedvar x = 1;console.log(x...",
    "content": "  자바스크립트 호이스팅에 대해 정리한다.호이스팅은 무엇인가?  MDN 문서에 따르면, 호이스팅은 인터프리터가 코드를 실행하기 전에 함수, 변수, 클래스 또는 임포트(import)의 선언문을 해당 범위의 맨 위로 이동시키는 과정을 말한다.아래 코드를 예시로 보면console.log(x); // undefinedvar x = 1;console.log(x) 가 실행되는 시점은 변수 x가 선언되기 전이기 때문에 참조 에러가 발생할 것으로 보이지만 실제로는 undefined 가 출력된다.코드를 실행하기 전 선언문을 해당 범위의 맨 위로 이동시키는 과정 이라는 정의를 보았을 때 그 이유는 변수 선언은 코드가 실행되는 시점(런타임)이 아닌 그 이전에 코드의 위로 끌어 올려지기 때문에 변수 선언의 위치에 상관없이 변수를 참조할 수 있다.var, let, const  각 키워드 별 특징은 아래 표와 같다.            키워드      범위      호이스팅      변경 가능 여부      중복 선언 가능 여부                  var      함수 스코프      호이스팅+초기화(undefined)      가능      가능              let      블록 스코프      호이스팅      가능      불가능              const      블록 스코프      호이스팅      불가능      불가능      console.log(x); // ReferenceErrorconsole.log(y); // ReferenceErrorlet x = 1;const y = 2;let 과 const 의 경우 위 코드처럼 선언 이전에 참조하면 참조 에러가 발생해 호이스팅이 일어나지 않는 것과 같이 보이지만 이는 런타임 이전에 선언단계 와 초기화 단계 가 한번에 되는 var 와 달리 let 과 const 의 경우 선언단계 와 초기화 단계 가 분리되어 런타임 이전에 선언단계 가 실행되고 초기화 단계 는 선언문에 도달했을 때 진행되기 때문에 선언 이전에 참조하면 에러가 발생한다.이렇게 스코프의 시작 지점부터 초기화 시작 지점까지 변수를 참조할 수 없는 구간을 일시적 사각지대(Temporal Dead Zone:TDZ) 라고 부른다함수 호이스팅  함수 역시 호이스팅이 일어나지만 함수 선언문 과 함수 표현식 두 방식의 동작은 조금 다르다.함수 선언문 의 경우 런타임 이전에 함수 객체가 먼저 생성되고 자바스크립트 엔진은 함수 이름과 동일한 이름의 식별자를 암묵적으로 생성하고 생성된 객체를 할당한다. 따라서 런타임에는 이미 함수 객체가 생성되어 있고 함수 이름과 동일한 식별자까지 할당이 완료된 상태이기 때문에 함수 선언문 이전에 함수를 참조할 수 있고 호출 역시도 가능하다.함수 표현식 의 경우 함수 리터럴이 변수에 할당되는 형태이기 때문에 함수 호이스팅 이 아닌 변수 호이스팅 이 발생하므로 선언 이전에 호출 시 타입에러가 발생한다.클래스 호이스팅  클래스는 let, const 키워드로 선언한 변수처럼 호이스팅 된다.console.log(Person);// ReferenceError: Cannot access 'Person' before initialization// 클래스 선언문class Person {}  참고: https://developer.mozilla.org/ko/docs/Glossary/Hoisting"
  },
  
  {
    "title": "블로그를 시작한 이유",
    "url": "/posts/first-write/",
    "categories": "일상",
    "tags": "writing",
    "date": "2023-08-07 00:00:00 +0900",
    





    
    "snippet": "  맨날 마음으로만 해야지 해야지 했던 블로그를 드디어 시작하게 되었다. 그래서 첫 글로 내가 왜 블로그를 시작했고, 앞으로 어떤 글을 작성해 나갈지를 간단히 적어보려고 한다.블로그를 시작한 이유퇴사 👋나는 3년 반 정도 다니고 있던 회사에서 곧 퇴사를 앞두고 있는 상황이다.퇴사를 앞두고 있다 보니 자연스레 여유 시간도 생겨서 그동안 생각만 하고 못하...",
    "content": "  맨날 마음으로만 해야지 해야지 했던 블로그를 드디어 시작하게 되었다. 그래서 첫 글로 내가 왜 블로그를 시작했고, 앞으로 어떤 글을 작성해 나갈지를 간단히 적어보려고 한다.블로그를 시작한 이유퇴사 👋나는 3년 반 정도 다니고 있던 회사에서 곧 퇴사를 앞두고 있는 상황이다.퇴사를 앞두고 있다 보니 자연스레 여유 시간도 생겨서 그동안 생각만 하고 못하고 있던 것들을 하나둘씩 해보고 있는데 그중 하나가 바로 블로그 운영해 보는 것이었다.퇴사 후 이직을 해야 하기 때문에 최근 여러 곳 지원을 해보고 있는데, 서류에서도 많이 떨어지고, 면접을 보면서도 부족했던 부분이 많이 느껴져서 당분간은 그런 부분들에 대해 공부를 하고 블로그에도 정리를 해보려고 한다.무엇이든 남겨보자 ✍️개발 블로그라 주 콘텐츠는 그런 내용이 될 거 같지만 틈틈히 요런 일상적인 이야기, 감명 깊게 본 영화나 책에 대한 후기도 적어보고 싶다.개발 관련 포스팅은 어떤 식으로 작성할지 아직 고민이 많다. 보통 공식 문서를 보거나 구글 검색으로 공부를 하게 될 텐데 다른 곳에 이미 있는 내용을 그대로 옮겨와 적는 게 의미가 있을까 생각이 있는데,, 이 부분은 제대로 공부를 해보면서 나만의 정리 방식을 잘 찾아봐야 할 거 같다.나는 어떤 걸 보면 그거에 대해 사람들이랑 얘기해 보는 걸 좋아해서 그런 내용의 포스팅도 해보려고 한다. 보통은 영화나 드라마를 많이 보긴 하지만 최근 다시 독서의 의지가 불타 밀리의 서재도 재 구독을 했다..^^ 얼른 책을 정해서 그 책에 대한 후기도 적어보고 싶다.마무리 👐역시 안 쓰던 글을 적자니 잘 안 나오는 거 같다.. 😅 그래도 시작이 반인만큼 앞으로 꾸준히 포스팅하며 블로그를 운영해 나가보고 싶다!!참고블로그를 구축하는 데는 여기에서 정리를 너무 잘해주셔서 많은 도움이 되었습니다."
  }
  
]

