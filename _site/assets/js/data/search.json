[
  
  {
    "title": "프로젝트 소개",
    "url": "/posts/toy-project/",
    "categories": "Project, 임하하",
    "tags": "writing",
    "date": "2023-11-17 00:00:00 +0900",
    





    
    "snippet": "  그 동안 공부했던 기술들을 바탕으로 침하하 사이트를 클론 코딩하는 프로젝트를 진행하기 위해 관련 내용을 정리한다.사용할 스킬Core  타입스크립트 / React(Next.js)최근 Next.js 14버전이 릴리즈 되어 14버전의 app router 기반으로 프로젝트를 세팅한다.상태 관리  Recoil, React Query(서버 상태)프로젝트의 전...",
    "content": "  그 동안 공부했던 기술들을 바탕으로 침하하 사이트를 클론 코딩하는 프로젝트를 진행하기 위해 관련 내용을 정리한다.사용할 스킬Core  타입스크립트 / React(Next.js)최근 Next.js 14버전이 릴리즈 되어 14버전의 app router 기반으로 프로젝트를 세팅한다.상태 관리  Recoil, React Query(서버 상태)프로젝트의 전역상태는 Recoil, 서버상태는 React Query 를 사용하여 관리한다.Mocking  MSW당장 백엔드 환경이 없으므로 MSW을 사용하여 mocking 환경을 구성한다.구현 범위침하하 사이트 아래와 같은 화면 및 기능을 제공한다.  홈  회원가입  로그인  게시판  게시글  글쓰기  글수정  마이페이지  알림  신고 건의이번 토이 프로젝트에서는 공부했던 기술들을 바탕으로 먼저 간단한 CRUD 기능에 해당되는  홈, 게시판, 게시글, 글쓰기, 글수정, 글삭제 화면 및 기능을 우선 진행한다.위 화면 및 기능을 우선 구현 후 회원 가입과 로그인 기능을 구현한다.알림, 마이 페이지, 신고 건의 화면은 화면만 다를뿐 CRUD 기능에 벗어나지 않아 따로 진행하진 않는다."
  },
  
  {
    "title": "실행 컨텍스트",
    "url": "/posts/execution-context/",
    "categories": "Javascript",
    "tags": "writing",
    "date": "2023-11-07 00:00:00 +0900",
    





    
    "snippet": "  자바스크립트 실행 컨텍스트에 대해 정리한다.실행 컨텍스트소스코드의 평가와 실행실행 컨텍스트를 알아보기에 앞서 모든 소스코드는 실행에 앞서 평가하는 과정을 거치면서 실행을 하기 위한 준비를 한다.소스코드 평가 과정에서는 실행 컨텍스트를 생성하고 변수, 함수 등의 선언부부터 먼저 실행하여 변수나 함수 식별자를 키로 실행 컨텍스트가 관리하는 스코프(렉시...",
    "content": "  자바스크립트 실행 컨텍스트에 대해 정리한다.실행 컨텍스트소스코드의 평가와 실행실행 컨텍스트를 알아보기에 앞서 모든 소스코드는 실행에 앞서 평가하는 과정을 거치면서 실행을 하기 위한 준비를 한다.소스코드 평가 과정에서는 실행 컨텍스트를 생성하고 변수, 함수 등의 선언부부터 먼저 실행하여 변수나 함수 식별자를 키로 실행 컨텍스트가 관리하는 스코프(렉시컬 환경의 환경 레코드)에 등록한다.소스코드 실행 과정은 소스코드 평가 과정이 끝나면 순차적으로 실행되기 시작한다. 이때 실행에 필요한 변수나 함수의 참조를 실행 컨텍스트가 관리하는 스코프에서 검색해서 알아낸다. 그리고 변수 값의 변경 등 소스코드의 실행 결과는 다시 실행컨텍스트가 관리하는 스코프에 등록된다.정리해보면 실행 컨텍스트는 소스코드 평가 과정에서 생성되며 실행 과정에서 필요한 식별자를 등록하고 관리하는 스코프와 코드 실행 순서 관리를 구현한 내부적인 메커니즘으로 구성되어 있으며 모든 코드는 실행 컨텍스트를 통해 실행되고 관리된다.렉시컬 환경렉시컬 환경(Lexical Environment)은 식별자와 식별자에 바인딩된 값, 그리고 상위 스코프에 대한 참조를 기록하는 자료구조로 실행 컨텍스트를 구성하는 컴포넌트이다.렉시컬 환경은 환경 레코드 와 외부 렉시컬 환경에 대한 참조 로 구성된다.  환경 레코드스코프에 포함된 식별자를 등록하고 등록된 식별자에 바인딩된 값을 관리하는 저장소다. 환경 레코드는 소스코드의 타입에 따라 관리하는 내용에 차이가 있다.  외부 렉시컬 환경에 대한 참조외부 렉시컬 환경에 대한 참조는 상위 스코프를 가리킨다. 이때 상위 스코프란 외부 렉시컬 환경. 즉 해당 실행 컨텍스트를 생성한 소스코드를 포함하는 상위 코드의 렉시컬 환경을 말한다. 외부 렉시컬 환경에 대한 참조를 통해 단방향 링크드 리스트인 스코프 체인을 구현한다.실행 컨텍스트 생성과 식별자 검색 과정아래 코드를 통해 실행 컨텍스트 생성과 식별자 검색 과정을 알아본다.var x = 1;const y = 2;function outerFunc(a) {    var x = 3;    const y = 4;    function innerFunc(b) {        const z = 5;        console.log(a + b + x + y + z);    }    innerFunc(10);}outerFunc(20); // 42전역 코드 평가소스가 로드되면 자바스크립트 엔진은 전역 코드를 아래와 같이 평가하여 전역 실행 컨텍스트와 렉시컬 환경을 생성한다.전역 실행 컨텍스트 생성 및 전역 렉시컬 환경 생성  비어있는 전역 실행 컨텍스트를 생성하여 실행 컨텍스트에 푸시  전역 렉시컬 환경을 생성하고 전역 실행 컨텍스트에 바인딩한다.전역 환경 레코드 생성전역 렉시컬 환경을 구성하는 컴포넌트인 전역 환경 레코드는 전역 변수를 관리하는 전역 스코프, 전역 객체의 빌트인 전역 프로퍼티와 빌트인 전역 함수, 표준 빌트인 객체를 제공한다.전역 환경 레코드는 객체 환경 레코드와 선언적 환경 레코드로 구성되어 있는데,객체 환경 레코드는 기존의 전역 객체가 관리하던 var 키워드로 선억한 전역 변수와 함수 선언문으로 정의한 전역 함수, 빌트인 전역 프로퍼티와 빌트인 전역 함수, 표준 빌트인 객체를 관리선언적 환경 레코드는 let, const 키워드로 선언한 전역 변수를 관리한다.객체 환경 레코드 생성객체 환경 레코드는 BindingObject라고 부르는 객체와 연결되고, 전역 코드 평가 과정에서 var 키워드로 선언한 전역 변수와 함수 선언문으로 정의된 전역 함수는 객체 환경 레코드에 연결된 BindingObject를 통해 전역 객체의 프로퍼티와 메서드가 된다.여기에서 변수 x는 var 키워드로 선언했기 때문에 선언 단계와 초기화 단계가 동시에 진행되므로, 전역 코드 평가 시점에 객체 환경 레코드에 바인딩된 BindingObject를 통해 전역 객체에 변수 식별자를 키로 등록한 다음 암묵적으로 undefined를 바인딩한다.따라서 var 키워드로 선언한 변수는 코드 실행 단계에서 변수 선언문 이전에도 참조할 수 있게 되고 이러한 과정이 변수 호이스팅이 발생하는 원인이다.함수 선언문으로 정의한 함수가 평가되면 함수 이름과 동일한 이름의 식별자를 객체 환경 레코드에 바인딩된 BindingObject를 통해 전역 객체에 키로 등록하고 생성된 함수 객체를 즉시 할당한다. 따라서 함수 선언문으로 정의한 함수는 함수 선언문 이전에 호출할 수 있고, 이것이 변수 호이스팅과 함수 호이스팅의 차이이다.선언적 환경 레코드 생성let, const 키워드로 선언한 전역 변수는 선언적 환경 레코드에 등록되고 관리된다.let, const 키워드로 선언한 변수는 선언 단계와 초기화 단계가 분리되어 진행되기 때문에 런타임에서 실행 흐름이 변수 선언문에 도달하기 전까지 일시적 사각지대(Temporal Dead Zone)에 빠지게 된다.this 바인딩일반적으로 전역 코드에서 this는 전역 객체를 가리키므로 전역 환경 레코드의 [[GlobalThisValue]] 내부 슬롯에는 전역 객체가 바인딩되고, 전역 코드에서 this를 참조하면 전역 환경 레코드의 [[GlobalThisValue]] 내부 슬록에 바인딩되어 있는 객체가 반환된다.외부 렉시컬 환경에 대한 참조외부 렉시컬 환경에 대한 참조는 현재 평가 중인 소스코드를 포함하는 외부 소스코드의 렉시컬 환경, 즉 상위 스코프를 가리킨다.현재 평가 중인 소스코드는 전역 코드이고, 이를 포함하는 소스코드는 없으므로 전역 렉시컬 환경의 외부 렉시컬 환경에 대한 참조에 null이 할당된다.전역 코드 실행평가를 마친 후 전역코드가 순차적으로 실행되기 시작하면서 변수 할당문이 실행되어 전역 변수 x, y에 값이 할당되고, outerFunc 함수가 호출된다.변수를 할당하거나 함수를 호출하기 위해서는 변수 또는 함수 이름이 선언되어 있는 식별자인지 확인해야 한다. 선언되지 않는 식별자는 참조할 수 없기 때문에 할당이나 호출 역시 할 수 없다. 또한 식별자는 다른 스코프에 여러 개 존재할 수도 있기 때문에 어느 스코프의 식별자를 참조하면 되는 지 결정할 필요가 있는데 이를 식별자 결정이라고 한다.식별자 결정을 위해 식별자를 검색할 때는 실행 중인 실행 컨텍스트의 렉시컬 환경의 환경레코드에서 식별자를 검색하기 시작하고 만약 실행 중인 실행 컨텍스트의 렉시컬 환경에서 식별자를 검색할 수 없으면 외부 렉시컬 환경에 대한 참조가 가리키는 렉시컬 환경, 즉 상위 스코프로 이동하여 식별자를 검색하는데 이것이 바로 스코프 체인의 동작 원리이다.outerFunc 함수 코드 평가아래 코드에서 현재까지 전역 코드 평가를 통해 전역 실행 컨텍스트가 생성되었고 전역 코드를 실행하고 있다. 그리고 outerFunc 함수를 호출하기 직전인 상황이다.var x = 1;const y = 2;function outerFunc(a) {    var x = 3;    const y = 4;    function innerFunc(b) {        const z = 5;        console.log(a + b + x + y + z);    }    innerFunc(10);}outerFunc(20); // &lt;- 호출 직전outerFunc 함수가 호출되면 전역 코드의 실행을 중단하고 outerFunc 함수 내부로 코드의 제어권이 이동되고, 함수 코드를 평가하기 시작한다.outerFunc 코드 평가outerFunc 함수 실행 컨텍스트와 렉시컬 환경은 아래와 같다.outerFunc 실행 컨텍스트 생성 및 렉시컬 환경 생성outerFunc 함수 실행 컨텍스트를 생성 후 실행 컨텍스트 스택에 푸시한다. 그 후에 렉시컬 환경을 생성하고 outerFunc 함수 실행 컨텍스트에 바인딩한다.outerFunc 함수 환경 레코드 생성함수 환경 레코드는 매개변수, arguments 객체, 함수 내부에 선언한 지역 변수와 중첩 함수를 등록하고 관리한다.outerFunc this 바인딩함수 환경 레코드의 [[ThisValue]] 내부 슬롯에 this가 바인딩된다. this는 함수 호출 방식에 따라 결정되는데, outerFunc 함수는 일반 함수로 호출되었으므로 this는 전역 객체를 가리킨다.outerFunc 외부 렉시컬 환경에 대한 참조외부 렉시컬 환경에 대한 참조에 outerFunc 함수 정의가 평가된 시점에 실행 중인 실행 컨텍스트의 렉시컬 환경의 참조가 할당된다.현재 시점에서 실행 중인 실행 컨텍스트는 전역 실행 컨텍스트이므로 외부 렉시컬 환경에 대한 참조에는 전역 렉시컬 환경의 참조가 할당된다.outerFunc 함수 코드 실행함수 평가를 마친 후 outerFunc 함수의 소스코드가 순차적으로 실행되기 시작한다.이 때, 매개변수에 인수가 할당되고, 변수 할당문이 실행되어 지역 변수 x, y에 값이 할당된다. 그리고 함수 innerFunc가 호출된다.innerFunc의 코드 평가와 실행은 outerFunc 와 동일한 과정으로 이루어지고 그 결과는 아래와 같다.innerFunc 함수 코드 평가innerFunc 함수 코드 실행innerFunc 함수 코드 실행 종료innerFunc 의 소스코드를 모두 실행하여 종료되면 실행 컨텍스트 스택에서 innerFunc 함수 실행 컨텍스트가 팝되어 제거되고 outerFunc 실행 컨텍스트가 실행 중인 실행 컨텍스트가 된다.실행 컨텍스트 스택에서 innerFunc 함수 실행 컨텍스트가 제거되었다고 해서 innerFunc 함수 렉시컬 환경까지 바로 소멸되는 것은 아니다. 렉시컬 환경은 실행 컨텍스트에 의해 참조되기는 하지만 독립적인 객체기 때문에 누군가에 의해 참조되지 않을 때 가비지 컬렉터에 의해 메모리 공간의 확보가 해제되어 소멸된다. 따라서 innerFunc 함수 실행 컨텍스트가 소멸되었다고 하더라도 innerFunc 함수 렉시컬 환경을 누군가 참조하고 있다면 innerFunc 함수 렉시컬 환경은 소멸되지 않는다.outer 함수 코드 &amp; 전역 코드 실행 종료이 후 outerFunc 함수 코드 실행이 종료되고 같은 과정으로 전역 코드 실행도 종료가 된다.정리지금까지 코드 예시를 통해 소스 코드가 평가되고 실행되는 과정에 어떻게 실행 컨텍스트가 생성되고 사용되는 지 살펴보았다. 이를 통해 실행 컨텍스트가 무엇인 지 요약해보면 아래와 같이 할수 있을 것 같다  실행 컨텍스트는 자바스크립트가 코드를 실행하기 위해 평가하는 과정에서 생성되며 실행 컨텍스트 스텍을 통해 코드 실행 순서를 관리하고 환경 레코드와 외부 렉시컬 환경에 대한 참조를 통해 실행에 필요한 식별자를 등록하고 관리하는 역할을 한다.마치며..이번 포스팅에는 면접에서 많이 물어본다는 실행 컨텍스트를 정리해보았다. 정리한 내용의 대부분은 모던 자바스크립트 deep dive 라는 책을 참고했다. 해당 내용을 쭉 보고 내가 이해한 나만의 언어로 적어 볼까 했지만 그러는 과정에서 잘못된 용어로 오히려 왜곡될 수 있을 거 같아 스스로 작성하고 그림을 만들어보면서 이해하는 데에 최대한 집중을 했다.실행 컨텍스트를 정리하기 전까지는 실행 컨텍스트가 한 마디로 정리가 안돼서 대답을 할 때 조금 갈피를 못잡았던 거 같은데 이제는 조금 정리가 된 거 같다. 정리하면서 호이스팅, 스코프체인, 렉시컬 환경, this, var와 let, const, 함수 선언문과 표현식의 차이 등등  하나하나가 면접 키워드들인 것들에 대한 내용도 함께 확인할 수 있었던 시간이 된 거 같은데, 이번 내용에는 포함이 안된 함수 호출 방식에 따른 this 의 결정, 렉시컬 환경과 클로저 함수 등의 내용은 추후 포스팅에서 따로 정리를 해도 좋을 거 같다는 생각이 들었다."
  },
  
  {
    "title": "호이스팅",
    "url": "/posts/hoisting/",
    "categories": "Javascript",
    "tags": "writing",
    "date": "2023-11-02 00:00:00 +0900",
    





    
    "snippet": "  자바스크립트 호이스팅에 대해 정리한다.호이스팅은 무엇인가?  MDN 문서에 따르면, 호이스팅은 인터프리터가 코드를 실행하기 전에 함수, 변수, 클래스 또는 임포트(import)의 선언문을 해당 범위의 맨 위로 이동시키는 과정을 말한다.아래 코드를 예시로 보면console.log(x); // undefinedvar x = 1;console.log(x...",
    "content": "  자바스크립트 호이스팅에 대해 정리한다.호이스팅은 무엇인가?  MDN 문서에 따르면, 호이스팅은 인터프리터가 코드를 실행하기 전에 함수, 변수, 클래스 또는 임포트(import)의 선언문을 해당 범위의 맨 위로 이동시키는 과정을 말한다.아래 코드를 예시로 보면console.log(x); // undefinedvar x = 1;console.log(x) 가 실행되는 시점은 변수 x가 선언되기 전이기 때문에 참조 에러가 발생할 것으로 보이지만 실제로는 undefined 가 출력된다.코드를 실행하기 전 선언문을 해당 범위의 맨 위로 이동시키는 과정 이라는 정의를 보았을 때 그 이유는 변수 선언은 코드가 실행되는 시점(런타임)이 아닌 그 이전에 코드의 위로 끌어 올려지기 때문에 변수 선언의 위치에 상관없이 변수를 참조할 수 있다.var, let, const  각 키워드 별 특징은 아래 표와 같다.            키워드      범위      호이스팅      변경 가능 여부      중복 선언 가능 여부                  var      함수 스코프      호이스팅+초기화(undefined)      가능      가능              let      블록 스코프      호이스팅      가능      불가능              const      블록 스코프      호이스팅      불가능      불가능      console.log(x); // ReferenceErrorconsole.log(y); // ReferenceErrorlet x = 1;const y = 2;let 과 const 의 경우 위 코드처럼 선언 이전에 참조하면 참조 에러가 발생해 호이스팅이 일어나지 않는 것과 같이 보이지만 이는 런타임 이전에 선언단계 와 초기화 단계 가 한번에 되는 var 와 달리 let 과 const 의 경우 선언단계 와 초기화 단계 가 분리되어 런타임 이전에 선언단계 가 실행되고 초기화 단계 는 선언문에 도달했을 때 진행되기 때문에 선언 이전에 참조하면 에러가 발생한다.이렇게 스코프의 시작 지점부터 초기화 시작 지점까지 변수를 참조할 수 없는 구간을 일시적 사각지대(Temporal Dead Zone:TDZ) 라고 부른다함수 호이스팅  함수 역시 호이스팅이 일어나지만 함수 선언문 과 함수 표현식 두 방식의 동작은 조금 다르다.함수 선언문 의 경우 런타임 이전에 함수 객체가 먼저 생성되고 자바스크립트 엔진은 함수 이름과 동일한 이름의 식별자를 암묵적으로 생성하고 생성된 객체를 할당한다. 따라서 런타임에는 이미 함수 객체가 생성되어 있고 함수 이름과 동일한 식별자까지 할당이 완료된 상태이기 때문에 함수 선언문 이전에 함수를 참조할 수 있고 호출 역시도 가능하다.함수 표현식 의 경우 함수 리터럴이 변수에 할당되는 형태이기 때문에 함수 호이스팅 이 아닌 변수 호이스팅 이 발생하므로 선언 이전에 호출 시 타입에러가 발생한다.클래스 호이스팅  클래스는 let, const 키워드로 선언한 변수처럼 호이스팅 된다.console.log(Person);// ReferenceError: Cannot access 'Person' before initialization// 클래스 선언문class Person {}  참고: https://developer.mozilla.org/ko/docs/Glossary/Hoisting"
  },
  
  {
    "title": "블로그를 시작한 이유",
    "url": "/posts/first-write/",
    "categories": "일상",
    "tags": "writing",
    "date": "2023-08-07 00:00:00 +0900",
    





    
    "snippet": "  맨날 마음으로만 해야지 해야지 했던 블로그를 드디어 시작하게 되었다. 그래서 첫 글로 내가 왜 블로그를 시작했고, 앞으로 어떤 글을 작성해 나갈지를 간단히 적어보려고 한다.블로그를 시작한 이유퇴사 👋나는 3년 반 정도 다니고 있던 회사에서 곧 퇴사를 앞두고 있는 상황이다.퇴사를 앞두고 있다 보니 자연스레 여유 시간도 생겨서 그동안 생각만 하고 못하...",
    "content": "  맨날 마음으로만 해야지 해야지 했던 블로그를 드디어 시작하게 되었다. 그래서 첫 글로 내가 왜 블로그를 시작했고, 앞으로 어떤 글을 작성해 나갈지를 간단히 적어보려고 한다.블로그를 시작한 이유퇴사 👋나는 3년 반 정도 다니고 있던 회사에서 곧 퇴사를 앞두고 있는 상황이다.퇴사를 앞두고 있다 보니 자연스레 여유 시간도 생겨서 그동안 생각만 하고 못하고 있던 것들을 하나둘씩 해보고 있는데 그중 하나가 바로 블로그 운영해 보는 것이었다.퇴사 후 이직을 해야 하기 때문에 최근 여러 곳 지원을 해보고 있는데, 서류에서도 많이 떨어지고, 면접을 보면서도 부족했던 부분이 많이 느껴져서 당분간은 그런 부분들에 대해 공부를 하고 블로그에도 정리를 해보려고 한다.무엇이든 남겨보자 ✍️개발 블로그라 주 콘텐츠는 그런 내용이 될 거 같지만 틈틈히 요런 일상적인 이야기, 감명 깊게 본 영화나 책에 대한 후기도 적어보고 싶다.개발 관련 포스팅은 어떤 식으로 작성할지 아직 고민이 많다. 보통 공식 문서를 보거나 구글 검색으로 공부를 하게 될 텐데 다른 곳에 이미 있는 내용을 그대로 옮겨와 적는 게 의미가 있을까 생각이 있는데,, 이 부분은 제대로 공부를 해보면서 나만의 정리 방식을 잘 찾아봐야 할 거 같다.나는 어떤 걸 보면 그거에 대해 사람들이랑 얘기해 보는 걸 좋아해서 그런 내용의 포스팅도 해보려고 한다. 보통은 영화나 드라마를 많이 보긴 하지만 최근 다시 독서의 의지가 불타 밀리의 서재도 재 구독을 했다..^^ 얼른 책을 정해서 그 책에 대한 후기도 적어보고 싶다.마무리 👐역시 안 쓰던 글을 적자니 잘 안 나오는 거 같다.. 😅 그래도 시작이 반인만큼 앞으로 꾸준히 포스팅하며 블로그를 운영해 나가보고 싶다!!참고블로그를 구축하는 데는 여기에서 정리를 너무 잘해주셔서 많은 도움이 되었습니다."
  }
  
]

