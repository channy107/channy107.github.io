

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>하찮's 개발자</title>
  <subtitle>임헌찬 블로그</subtitle>
  <updated>2024-01-11T10:34:42+09:00</updated>
  <author>
    <name>your_full_name</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="ko"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator>
  <rights> © 2024 your_full_name </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>임하하 - 홈 화면 구현 리뷰(?) 및 새해 다짐</title>
    <link href="http://localhost:4000/posts/20240111/" rel="alternate" type="text/html" title="임하하 - 홈 화면 구현 리뷰(?) 및 새해 다짐" />
    <published>2024-01-11T00:00:00+09:00</published>
  
    <updated>2024-01-11T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/20240111/</id>
    <content src="http://localhost:4000/posts/20240111/" />
    <author>
      <name>channy</name>
    </author>

  
    
    <category term="Project" />
    
    <category term="임하하" />
    
  

  
    <summary>
      





      이번 글은 임하하 페이지의 홈 화면을 완성하기도 했고, 새해가 되었으니 다짐한 것들에 대해 가볍게(?) 적어보겠다!!

구현 화면


전에 header만 찔끔있어 휑하게 보이던 페이지가 구현해놓고 나니 이제 나름 실제 페이지랑 거의 비슷해보인다 ㅎㅎ 한 페이지지만 이 페이지를 구성하는데 써보고 싶었던 기술들을 다 맛보기를 해봤다

msw 를 이용해 메뉴, 공지, 게시글 등의 데이터를 모킹하고 react-query를 사용해서 서버 상태에 대한 관리를 하고 페이지네이션이나 검색 기능을 구현하기 위해서 전역 상태 관리 도구로 recoil도 사용했다. recoil은 이번에 처음 사용해보는거 였는데 생각보다 너무 간단하게 상태 공유를 할 수 있어서 좋았다. 전 회사에서는 react-query를 도입하면서 관리해...
    </summary>
  

  </entry>

  
  <entry>
    <title>임하하 - 폴더 구조 및 path 정리</title>
    <link href="http://localhost:4000/posts/lim-haha-header-tab/" rel="alternate" type="text/html" title="임하하 - 폴더 구조 및 path 정리" />
    <published>2023-12-14T00:00:00+09:00</published>
  
    <updated>2023-12-14T13:33:53+09:00</updated>
  
    <id>http://localhost:4000/posts/lim-haha-header-tab/</id>
    <content src="http://localhost:4000/posts/lim-haha-header-tab/" />
    <author>
      <name>channy</name>
    </author>

  
    
    <category term="Project" />
    
    <category term="임하하" />
    
  

  
    <summary>
      





      
  임하하 프로젝트의 폴더 구조 및 path 정리를 정리한다.


구현 화면
아직은 볼품 없지만 나름 비슷해져가고 있다 ㅎㅎ




폴더 구조 및 path 정리
app 하위 폴더 구조
next app router 에서는 파일 시스템 기반으로 라우팅을 구현하기 때문에 app 하위의 디렉토리가 곧 라우팅 될 페이지라고 볼 수 있다. 또한 [디렉토리 이름]와 같이 디렉토리 이름을 통해 다이나믹 라우팅 등의 기능을 지원하기도 하기 때문에 아래 폴더 구조에서 각각의 폴더가 어떤 역할을 하는 지 적어 보려고 한다.
├── [boardname]
│   ├── [board]
│   └── page.tsx
├── _api
│   ├── getBoardMenus.ts
│   └── types.ts
├── _compon...
    </summary>
  

  </entry>

  
  <entry>
    <title>this</title>
    <link href="http://localhost:4000/posts/this/" rel="alternate" type="text/html" title="this" />
    <published>2023-12-11T00:00:00+09:00</published>
  
    <updated>2023-12-11T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/this/</id>
    <content src="http://localhost:4000/posts/this/" />
    <author>
      <name>channy</name>
    </author>

  
    
    <category term="Javascript" />
    
  

  
    <summary>
      





      
  이 전 실행 컨텍스트 포스팅에서도  언급했던 개념인 자바스크립트 this에 관해 정리해본다.


this
this 키워드를 알아보기 전 객체에 대해 알고 넘어가자.

객체는 상태를 나타내는 프로퍼티와 동작을 나타내는 메서드를 하나의 논리적인 단위로 묶은 자료구조이다. 이때 동작을 나타내는 메서드는 자신이 속한 객체의 프로퍼티를 참조하고 변경할 수 있어야 한다. 따라서 메서드가 자신이 속한 객체의 프로퍼티를 참조하려면 먼저 자신이 속한 객체를 가리키는 식별자를 참조할 수 있어야 한다.

const circle = {
    radius: 5
    getDiameter() {
        return 2 * circle.radius;
    }
};

console.log(circle.getDia...
    </summary>
  

  </entry>

  
  <entry>
    <title>SOLID 원칙</title>
    <link href="http://localhost:4000/posts/solid/" rel="alternate" type="text/html" title="SOLID 원칙" />
    <published>2023-11-22T00:00:00+09:00</published>
  
    <updated>2023-11-22T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/solid/</id>
    <content src="http://localhost:4000/posts/solid/" />
    <author>
      <name>channy</name>
    </author>

  
    
    <category term="개발방법론" />
    
  

  
    <summary>
      





      
  객체지향 설계에서 사용되는 5가지 원칙인 SOLID 원칙에 대해 정리해본다.


SOLID 원칙
SOLID 는 위키에 따르면 로버트 마틴이 2000년대 초반 명명한 객체 지향 프로그래밍 및 설계의 5가지 기본 원칙을 소개한 것으로 개발자가 시간이 지나도 유지 보수와 확장이 쉬운 시스템을 만들고자 할 때 이 원칙들을 적용할 수 있다고 소개한다.

그럼 바로 SOLID 원칙에 대해 살펴보자.

SRP(단일책임의 원칙: Single Responsibility Principle)

  한 클래스는 하나의 책임만 가져야 한다.


로버트 마틴은 책임을 변경하려는 이유로 정의하고 어떤 클래스나 모듈을 변경하려는 단 하나의 이유만을 가져야 한다고 결론을 짓는다.

예시 (feat. chat gpt)
// Ba...
    </summary>
  

  </entry>

  
  <entry>
    <title>임하하 - Home(기존페이지 분석)</title>
    <link href="http://localhost:4000/posts/lim-haha-home/" rel="alternate" type="text/html" title="임하하 - Home(기존페이지 분석)" />
    <published>2023-11-22T00:00:00+09:00</published>
  
    <updated>2023-11-22T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/lim-haha-home/</id>
    <content src="http://localhost:4000/posts/lim-haha-home/" />
    <author>
      <name>channy</name>
    </author>

  
    
    <category term="Project" />
    
    <category term="임하하" />
    
  

  
    <summary>
      





      
  임하하 Home 화면 작업 전 실제 침하하 Home 화면의 요소들을 정리해본다.


침하하 Home 전체 화면
아래 사진은 침하하 Home 화면이다. 화면이 상/하로 길어 크게 회원가입/로그인 부터 광고영역까지 상단 부분, 아래 게시글 목록 하단 부분으로 정리해본다.



상단부분
침하하 Home 상단부분에서는 크게 Header 영역, shortcuts 영역, 최신 업로드 영역으로 나누고 있다


Header 영역
Header 영역은 최상단에 회원가입과 로그인 중간에 로고 그 아래에는 게시판으로 이동할 수 있는 탭들이 있다.



탭의 경우 hover 할 경우 해당 게시판에 포함되어 있는 상세 게시판들이 보인다. 탭을 클릭을 할 경우 해당 게시판의 전체 게시물 목록 페이지로 가고 상세 게시판을 클...
    </summary>
  

  </entry>

</feed>


