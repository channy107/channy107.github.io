

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>하찮's 개발자</title>
  <subtitle>임헌찬 블로그</subtitle>
  <updated>2023-12-11T09:58:22+09:00</updated>
  <author>
    <name>your_full_name</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="ko"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator>
  <rights> © 2023 your_full_name </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>this</title>
    <link href="http://localhost:4000/posts/this/" rel="alternate" type="text/html" title="this" />
    <published>2023-12-11T00:00:00+09:00</published>
  
    <updated>2023-12-11T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/this/</id>
    <content src="http://localhost:4000/posts/this/" />
    <author>
      <name>channy</name>
    </author>

  
    
    <category term="Javascript" />
    
  

  
    <summary>
      





      
  이 전 실행 컨텍스트 포스팅에서도  언급했던 개념인 자바스크립트 this에 관해 정리해본다.


this
this 키워드를 알아보기 전 객체에 대해 알고 넘어가자.

객체는 상태를 나타내는 프로퍼티와 동작을 나타내는 메서드를 하나의 논리적인 단위로 묶은 자료구조이다. 이때 동작을 나타내는 메서드는 자신이 속한 객체의 프로퍼티를 참조하고 변경할 수 있어야 한다. 따라서 메서드가 자신이 속한 객체의 프로퍼티를 참조하려면 먼저 자신이 속한 객체를 가리키는 식별자를 참조할 수 있어야 한다.

const circle = {
    radius: 5
    getDiameter() {
        return 2 * circle.radius;
    }
};

console.log(circle.getDia...
    </summary>
  

  </entry>

  
  <entry>
    <title>SOLID 원칙</title>
    <link href="http://localhost:4000/posts/solid/" rel="alternate" type="text/html" title="SOLID 원칙" />
    <published>2023-11-22T00:00:00+09:00</published>
  
    <updated>2023-11-22T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/solid/</id>
    <content src="http://localhost:4000/posts/solid/" />
    <author>
      <name>channy</name>
    </author>

  
    
    <category term="개발방법론" />
    
  

  
    <summary>
      





      
  객체지향 설계에서 사용되는 5가지 원칙인 SOLID 원칙에 대해 정리해본다.


SOLID 원칙
SOLID 는 위키에 따르면 로버트 마틴이 2000년대 초반 명명한 객체 지향 프로그래밍 및 설계의 5가지 기본 원칙을 소개한 것으로 개발자가 시간이 지나도 유지 보수와 확장이 쉬운 시스템을 만들고자 할 때 이 원칙들을 적용할 수 있다고 소개한다.

그럼 바로 SOLID 원칙에 대해 살펴보자.

SRP(단일책임의 원칙: Single Responsibility Principle)

  한 클래스는 하나의 책임만 가져야 한다.


로버트 마틴은 책임을 변경하려는 이유로 정의하고 어떤 클래스나 모듈을 변경하려는 단 하나의 이유만을 가져야 한다고 결론을 짓는다.

예시 (feat. chat gpt)
// Ba...
    </summary>
  

  </entry>

  
  <entry>
    <title>임하하 - Home(기존페이지 분석)</title>
    <link href="http://localhost:4000/posts/lim-haha-home/" rel="alternate" type="text/html" title="임하하 - Home(기존페이지 분석)" />
    <published>2023-11-22T00:00:00+09:00</published>
  
    <updated>2023-11-22T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/lim-haha-home/</id>
    <content src="http://localhost:4000/posts/lim-haha-home/" />
    <author>
      <name>channy</name>
    </author>

  
    
    <category term="Project" />
    
    <category term="임하하" />
    
  

  
    <summary>
      





      
  임하하 Home 화면 작업 전 실제 침하하 Home 화면의 요소들을 정리해본다.


침하하 Home 전체 화면
아래 사진은 침하하 Home 화면이다. 화면이 상/하로 길어 크게 회원가입/로그인 부터 광고영역까지 상단 부분, 아래 게시글 목록 하단 부분으로 정리해본다.



상단부분
침하하 Home 상단부분에서는 크게 Header 영역, shortcuts 영역, 최신 업로드 영역으로 나누고 있다


Header 영역
Header 영역은 최상단에 회원가입과 로그인 중간에 로고 그 아래에는 게시판으로 이동할 수 있는 탭들이 있다.



탭의 경우 hover 할 경우 해당 게시판에 포함되어 있는 상세 게시판들이 보인다. 탭을 클릭을 할 경우 해당 게시판의 전체 게시물 목록 페이지로 가고 상세 게시판을 클...
    </summary>
  

  </entry>

  
  <entry>
    <title>프로젝트 소개</title>
    <link href="http://localhost:4000/posts/toy-project/" rel="alternate" type="text/html" title="프로젝트 소개" />
    <published>2023-11-17T00:00:00+09:00</published>
  
    <updated>2023-11-17T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/toy-project/</id>
    <content src="http://localhost:4000/posts/toy-project/" />
    <author>
      <name>channy</name>
    </author>

  
    
    <category term="Project" />
    
    <category term="임하하" />
    
  

  
    <summary>
      





      
  그 동안 공부했던 기술들을 바탕으로 침하하 사이트를 클론 코딩하는 프로젝트를 진행하기 위해 관련 내용을 정리한다.


사용할 스킬
Core

  타입스크립트 / React(Next.js)


최근 Next.js 14버전이 릴리즈 되어 14버전의 app router 기반으로 프로젝트를 세팅한다.
상태 관리

  Recoil, React Query(서버 상태)


프로젝트의 전역상태는 Recoil, 서버상태는 React Query 를 사용하여 관리한다.
Mocking

  MSW


당장 백엔드 환경이 없으므로 MSW을 사용하여 mocking 환경을 구성한다.

구현 범위
침하하 사이트 아래와 같은 화면 및 기능을 제공한다.

  홈
  회원가입
  로그인
  게시판
  게시글
  글쓰기
  글수정
...
    </summary>
  

  </entry>

  
  <entry>
    <title>실행 컨텍스트</title>
    <link href="http://localhost:4000/posts/execution-context/" rel="alternate" type="text/html" title="실행 컨텍스트" />
    <published>2023-11-07T00:00:00+09:00</published>
  
    <updated>2023-11-07T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/execution-context/</id>
    <content src="http://localhost:4000/posts/execution-context/" />
    <author>
      <name>channy</name>
    </author>

  
    
    <category term="Javascript" />
    
  

  
    <summary>
      





      
  자바스크립트 실행 컨텍스트에 대해 정리한다.


실행 컨텍스트

소스코드의 평가와 실행
실행 컨텍스트를 알아보기에 앞서 모든 소스코드는 실행에 앞서 평가하는 과정을 거치면서 실행을 하기 위한 준비를 한다.

소스코드 평가 과정에서는 실행 컨텍스트를 생성하고 변수, 함수 등의 선언부부터 먼저 실행하여 변수나 함수 식별자를 키로 실행 컨텍스트가 관리하는 스코프(렉시컬 환경의 환경 레코드)에 등록한다.

소스코드 실행 과정은 소스코드 평가 과정이 끝나면 순차적으로 실행되기 시작한다. 이때 실행에 필요한 변수나 함수의 참조를 실행 컨텍스트가 관리하는 스코프에서 검색해서 알아낸다. 그리고 변수 값의 변경 등 소스코드의 실행 결과는 다시 실행컨텍스트가 관리하는 스코프에 등록된다.

정리해보면 실행 컨텍스트는...
    </summary>
  

  </entry>

</feed>


