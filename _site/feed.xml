

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>하찮's 개발자</title>
  <subtitle>임헌찬 블로그</subtitle>
  <updated>2024-03-12T15:43:03+09:00</updated>
  <author>
    <name>your_full_name</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="ko"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator>
  <rights> © 2024 your_full_name </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>하찮은(?) 코딩 회원가입/로그인</title>
    <link href="http://localhost:4000/posts/trivialcoding/" rel="alternate" type="text/html" title="하찮은(?) 코딩 회원가입/로그인" />
    <published>2024-03-12T00:00:00+09:00</published>
  
    <updated>2024-03-12T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/trivialcoding/</id>
    <content src="http://localhost:4000/posts/trivialcoding/" />
    <author>
      <name>channy</name>
    </author>

  
    
    <category term="Project" />
    
    <category term="trivialcoding" />
    
  

  
    <summary>
      





      
  이번 글은 내가 가진 기술 set과 새로운 기술들을 공부하면서 여러가지 서비스를 개발하고 출시해볼 하찮은코딩(trivialcoding.com)의 첫 서비스인 회원가입/로그인 개발에 관한 회고 글이다.


안녕하세요 하찮은 개발자입니다 ✋



우선 이름에 대해서 간단히 소개하면 한창 박명수님이 찮은이형이라고 불릴 때 마침 내 이름도 초성이 ㅎㅊ 이다보니 친구들이 하찮이형 하찮아 라고 종종 불렀고 별명이 됐다. 😇

따지고 보면 좋은 뜻은 아니지만 싫진 않은 별명이었고 개발자가 되고 나선 나의 브랜드 네임으로 지으면 재밌겠다라는 생각을 했었다. 친근하기도 하면서 늘 겸손한 자세로 배우자라는 의미도 담아..? ㅎㅎ

하찮은 개발자 하찮 = 개발자 나름 언어유희까지..! 하핫 🤣

그래서 늘 맘 속으로...
    </summary>
  

  </entry>

  
  <entry>
    <title>React Server Component</title>
    <link href="http://localhost:4000/posts/RSC/" rel="alternate" type="text/html" title="React Server Component" />
    <published>2024-01-30T00:00:00+09:00</published>
  
    <updated>2024-01-30T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/RSC/</id>
    <content src="http://localhost:4000/posts/RSC/" />
    <author>
      <name>channy</name>
    </author>

  
    
    <category term="Frontend" />
    
    <category term="React" />
    
  

  
    <summary>
      





      
  이번 글에서는 React 18 버전부터 도입된 개념인 React Server Component 에 대해 정리한다.


이번에 침하하 clone 과 쇼핑몰 사이트 개발을 하면서 공부 겸 Next 14 를 사용했었다.

회사에서 사용할 때는 Next를 써보지 않않고, 공부할 때는 제일 최신버전인 14 버전으로 공부해서 page router 가 아닌 app router 기반으로 Next 개발을 시작했다.

저번주에 면접을 진행하면서 관련 질문을 받은 만큼 이번에는 Next 13 이상 버전의 app router 의 가장 큰 특징인 React Server Component 를 정리해보려고 한다.

RSC(React Server Component)
단순히 이름만 보았을 땐 이름에 Server 가 들어가기 때...
    </summary>
  

  </entry>

  
  <entry>
    <title>임하하 - 홈 화면 구현 리뷰(?) 및 새해 다짐</title>
    <link href="http://localhost:4000/posts/20240111/" rel="alternate" type="text/html" title="임하하 - 홈 화면 구현 리뷰(?) 및 새해 다짐" />
    <published>2024-01-11T00:00:00+09:00</published>
  
    <updated>2024-01-11T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/20240111/</id>
    <content src="http://localhost:4000/posts/20240111/" />
    <author>
      <name>channy</name>
    </author>

  
    
    <category term="Project" />
    
    <category term="임하하" />
    
  

  
    <summary>
      





      이번 글은 임하하 페이지의 홈 화면을 완성하기도 했고, 새해가 되었으니 다짐한 것들에 대해 가볍게(?) 적어보겠다!!

구현 화면


전에 header만 찔끔있어 휑하게 보이던 페이지가 구현해놓고 나니 이제 나름 실제 페이지랑 거의 비슷해보인다 ㅎㅎ 한 페이지지만 이 페이지를 구성하는데 써보고 싶었던 기술들을 다 맛보기를 해봤다

msw 를 이용해 메뉴, 공지, 게시글 등의 데이터를 모킹하고 react-query를 사용해서 서버 상태에 대한 관리를 하고 페이지네이션이나 검색 기능을 구현하기 위해서 전역 상태 관리 도구로 recoil도 사용했다. recoil은 이번에 처음 사용해보는거 였는데 생각보다 너무 간단하게 상태 공유를 할 수 있어서 좋았다. 전 회사에서는 react-query를 도입하면서 관리해...
    </summary>
  

  </entry>

  
  <entry>
    <title>임하하 - 폴더 구조 및 path 정리</title>
    <link href="http://localhost:4000/posts/lim-haha-header-tab/" rel="alternate" type="text/html" title="임하하 - 폴더 구조 및 path 정리" />
    <published>2023-12-14T00:00:00+09:00</published>
  
    <updated>2023-12-14T13:33:53+09:00</updated>
  
    <id>http://localhost:4000/posts/lim-haha-header-tab/</id>
    <content src="http://localhost:4000/posts/lim-haha-header-tab/" />
    <author>
      <name>channy</name>
    </author>

  
    
    <category term="Project" />
    
    <category term="임하하" />
    
  

  
    <summary>
      





      
  임하하 프로젝트의 폴더 구조 및 path 정리를 정리한다.


구현 화면
아직은 볼품 없지만 나름 비슷해져가고 있다 ㅎㅎ




폴더 구조 및 path 정리
app 하위 폴더 구조
next app router 에서는 파일 시스템 기반으로 라우팅을 구현하기 때문에 app 하위의 디렉토리가 곧 라우팅 될 페이지라고 볼 수 있다. 또한 [디렉토리 이름]와 같이 디렉토리 이름을 통해 다이나믹 라우팅 등의 기능을 지원하기도 하기 때문에 아래 폴더 구조에서 각각의 폴더가 어떤 역할을 하는 지 적어 보려고 한다.
├── [boardname]
│   ├── [board]
│   └── page.tsx
├── _api
│   ├── getBoardMenus.ts
│   └── types.ts
├── _compon...
    </summary>
  

  </entry>

  
  <entry>
    <title>this</title>
    <link href="http://localhost:4000/posts/this/" rel="alternate" type="text/html" title="this" />
    <published>2023-12-11T00:00:00+09:00</published>
  
    <updated>2023-12-11T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/this/</id>
    <content src="http://localhost:4000/posts/this/" />
    <author>
      <name>channy</name>
    </author>

  
    
    <category term="Javascript" />
    
  

  
    <summary>
      





      
  이 전 실행 컨텍스트 포스팅에서도  언급했던 개념인 자바스크립트 this에 관해 정리해본다.


this
this 키워드를 알아보기 전 객체에 대해 알고 넘어가자.

객체는 상태를 나타내는 프로퍼티와 동작을 나타내는 메서드를 하나의 논리적인 단위로 묶은 자료구조이다. 이때 동작을 나타내는 메서드는 자신이 속한 객체의 프로퍼티를 참조하고 변경할 수 있어야 한다. 따라서 메서드가 자신이 속한 객체의 프로퍼티를 참조하려면 먼저 자신이 속한 객체를 가리키는 식별자를 참조할 수 있어야 한다.

const circle = {
    radius: 5
    getDiameter() {
        return 2 * circle.radius;
    }
};

console.log(circle.getDia...
    </summary>
  

  </entry>

</feed>


